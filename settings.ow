settings
{
	main
	{
		Description: "Roadhog Knockback Royale! Hit others to knock them around, and use your gun to multi-jump. Hook others to swap places!  Take a Breather is a powerful stimpack that gives you more speed, higher knockback, and mini-stun on hit. Have fun!"
	}

	lobby
	{
		Max FFA Players: 8
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Castillo
				Eichenwalde
				Ilios Lighthouse
				Ilios Ruins
				Ilios Well
				Lijiang Garden
				Necropolis
				Nepal Sanctum
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Score To Win: 10
		}
	}

	heroes
	{
		General
		{
			Roadhog
			{
				Chain Hook Cooldown Time: 40%
				Damage Dealt: 50%
				Healing Dealt: 30%
				Jump Vertical Speed: 200%
				Movement Speed: 125%
				Take a Breather Cooldown Time: 175%
				Ultimate Generation Whole Hog: 300%
				Whole Hog Knockback Scalar: 200%
			}

			enabled heroes
			{
				Roadhog
			}
		}
	}
}

variables
{
	global:
		26: DEBUG
		27: InvertAttackerDirectionOnSwap
		28: InvertVictimDirectionOnSwap
		29: KnockbackMin
		30: KnockbackMax
		31: KnockbackBase
		32: KnockbackDamageFactor
		33: KnockbackUpFactor
		34: KnockbackBuffedFactor
		35: KnockbackSelf
		36: KnockbackSelfUltimate
		37: BuffedMiniStunDuration
		38: BuffedDuration
		39: BuffedWindupDuration

	player:
		26: TargetPosition
		27: TargetFacing
		28: Knockback
		29: Buffed
		30: BuffedEffectId
		31: BuffedStartTime
		32: BuffedHUDId
		33: TutorialVisible
}

subroutines
{
	8: ApplyDamageBasedKnockback
	9: ApplySelfKnockback
	10: StunVictimIfEventPlayerBuffed
	11: ApplyKnockback
}

rule("Init:GlobalVars")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Global.DEBUG = True;
		Global.InvertAttackerDirectionOnSwap = True;
		Global.InvertVictimDirectionOnSwap = True;
		Global.KnockbackMin = 0;
		Global.KnockbackMax = 60;
		Global.KnockbackBase = 3;
		Global.KnockbackDamageFactor = 1.750;
		Global.KnockbackUpFactor = 0.250;
		Global.KnockbackBuffedFactor = 1.500;
		Global.KnockbackSelf = 8;
		Global.KnockbackSelfUltimate = 4.500;
		Global.BuffedMiniStunDuration = 1;
		Global.BuffedDuration = 5;
		Global.BuffedWindupDuration = 0.500;
	}
}

rule("Init:PlayerVars")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.TutorialVisible = True;
	}
}

rule("Init:PlayerHUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player.TutorialVisible && Hero Of(Event Player) == Hero(Roadhog) ? Event Player : Null, Null, Null,
			Custom String("{0} swaps places - jump over a pit and hook someone to score a kill.", Ability Icon String(Hero(Roadhog),
			Button(Ability 1))), Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.TutorialVisible && Hero Of(Event Player) == Hero(Roadhog) ? Event Player : Null, Null, Null,
			Custom String("{0} and {1} knock enemies back. Knockback scales with damage.", Ability Icon String(Hero(Roadhog), Button(
			Primary Fire)), Ability Icon String(Hero(Roadhog), Button(Melee))), Left, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player.TutorialVisible && Hero Of(Event Player) == Hero(Roadhog) ? Event Player : Null, Null, Null,
			Custom String("{0} gives you more speed, knockback, and mini-stun!", Ability Icon String(Hero(Roadhog), Button(Ability 2))),
			Left, 2, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.TutorialVisible && Hero Of(Event Player) == Hero(Roadhog) ? Event Player : Null, Null, Null,
			Custom String("Use {0} mid-air for extra jumps and {1} to hover.", Ability Icon String(Hero(Roadhog), Button(Primary Fire)),
			Ability Icon String(Hero(Roadhog), Button(Ultimate))), Left, 3, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player.TutorialVisible && Hero Of(Event Player) == Hero(Roadhog) ? Event Player : Null, Null, Null,
			Custom String("Press [{0}] {1} to show/hide this tutorial. Have fun!", Input Binding String(Button(Interact)), Button(
			Interact)), Left, 4, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Interact@Player:ToggleTutorial")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.TutorialVisible = !Event Player.TutorialVisible;
	}
}

rule("PlayerDealtDamage@Roadhog@Ability1:Swap&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Environment Credit Player(Victim, Event Player);
		Event Player.TargetPosition = Position Of(Victim);
		Event Player.TargetFacing = Direction Towards(Eye Position(Victim), Eye Position(Event Player));
		Victim.TargetFacing = Direction Towards(Eye Position(Event Player), Eye Position(Victim));
		Teleport(Victim, Position Of(Event Player));
		Teleport(Event Player, Event Player.TargetPosition);
		Cancel Primary Action(Event Player);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Victim, 100);
		Apply Impulse(Victim, Vector(0, 0, 0), 0, To World, Cancel Contrary Motion XYZ);
		If(Global.InvertVictimDirectionOnSwap == True);
			Set Facing(Victim, Victim.TargetFacing, To World);
		End;
		If(Global.InvertAttackerDirectionOnSwap == True);
			Set Facing(Event Player, Event Player.TargetFacing, To World);
		End;
		Wait(0.100, Ignore Condition);
		Call Subroutine(StunVictimIfEventPlayerBuffed);
	}
}

rule("PlayerDealtDamage@Roadhog@Primary:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Call Subroutine(ApplyDamageBasedKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Secondary:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Call Subroutine(ApplyDamageBasedKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Melee:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Melee);
	}

	actions
	{
		Victim.Knockback = Global.KnockbackMax;
		Call Subroutine(ApplyKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Ultimate:Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Set Environment Credit Player(Victim, Event Player);
	}
}

rule("PlayerFired@Roadhog@NotGrounded@Primary:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Call Subroutine(ApplySelfKnockback);
	}
}

rule("PlayerFired@Roadhog@NotGrounded@Secondary:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Call Subroutine(ApplySelfKnockback);
	}
}

rule("PlayerIsFiring@Roadhog@Ultimate:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		If(Is On Ground(Event Player) == False);
			Apply Impulse(Event Player, -1 * Facing Direction Of(Event Player), Global.KnockbackSelfUltimate, To World,
				Cancel Contrary Motion XYZ);
		End;
		Loop If Condition Is True;
	}
}

rule("PlayerUsedAbility@Roadhog@TakeABreather:ApplyBuffed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(Global.BuffedWindupDuration, Abort When False);
		Event Player.Buffed = True;
		Wait(Global.BuffedDuration, Ignore Condition);
		Event Player.Buffed = False;
	}
}

rule("PlayerVar[Buffed]:BecomeTrue")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Buffed == True;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 100 * Global.KnockbackBuffedFactor);
		Event Player.BuffedStartTime = Total Time Elapsed;
		Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Good Aura, Color(Yellow),
			Event Player, 1.100, Visible To Position and Radius);
		Event Player.BuffedEffectId = Last Created Entity;
		Create Progress Bar HUD Text(Event Player, Update Every Frame(100 * Max(0, 1 - (Total Time Elapsed - Event Player.BuffedStartTime)
			/ Global.BuffedDuration)), Ability Icon String(Hero(Roadhog), Button(Ability 2)), Top, 100, Color(Yellow), Color(Yellow),
			Values, Default Visibility);
		Event Player.BuffedHUDId = Last Text ID;
		Set Jump Vertical Speed(Event Player, 150);
		Set Move Speed(Event Player, 175);
	}
}

rule("PlayerVar[Buffed]:BecomeFalse")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Buffed == False;
	}

	actions
	{
		Set Knockback Dealt(Event Player, 100);
		Destroy Effect(Event Player.BuffedEffectId);
		Destroy Progress Bar HUD Text(Last Text ID);
		Set Jump Vertical Speed(Event Player, 100);
		Set Move Speed(Event Player, 100);
	}
}

rule("PlayerDied@Self:NoScoreLoss")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Victim == Attacker;
	}

	actions
	{
		Modify Player Score(Victim, 1);
	}
}

rule("PlayerDied:RemoveBuff")
{
	event
	{
		Player Died;
		All;
		Roadhog;
	}

	actions
	{
		Event Player.Buffed = False;
	}
}

rule("Subroutine:ApplyDamageBasedKnockback")
{
	event
	{
		Subroutine;
		ApplyDamageBasedKnockback;
	}

	actions
	{
		Victim.Knockback = Min(Global.KnockbackMax, Max(Global.KnockbackMin,
			Global.KnockbackBase + Event Damage * Global.KnockbackDamageFactor));
		Call Subroutine(ApplyKnockback);
	}
}

rule("Subroutine:ApplyKnockback")
{
	event
	{
		Subroutine;
		ApplyKnockback;
	}

	actions
	{
		Log To Inspector(Custom String("ApplyKnockback: Attacker={0}, Victim={1}", Event Player, Victim));
		Set Environment Credit Player(Victim, Event Player);
		If(Event Player.Buffed == True);
			Victim.Knockback *= Global.KnockbackBuffedFactor;
		End;
		Call Subroutine(StunVictimIfEventPlayerBuffed);
		Apply Impulse(Victim, Vector(X Component Of(Event Direction), Global.KnockbackUpFactor, Z Component Of(Event Direction)),
			Victim.Knockback, To World, Cancel Contrary Motion);
	}
}

rule("Subroutine:KnockbackSelf")
{
	event
	{
		Subroutine;
		ApplySelfKnockback;
	}

	actions
	{
		Apply Impulse(Event Player, -1 * Facing Direction Of(Event Player), Global.KnockbackSelf, To World, Cancel Contrary Motion XYZ);
	}
}

rule("Subroutine:StunVictimIfEventPlayerBuffed")
{
	event
	{
		Subroutine;
		StunVictimIfEventPlayerBuffed;
	}

	actions
	{
		If(Event Player.Buffed == True);
			Set Status(Victim, Event Player, Stunned, Global.BuffedMiniStunDuration);
		End;
	}
}

rule("[DEBUG]SpawnDummyBots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.DEBUG == True;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
	}
}

rule("[DEBUG]MatchStartsInstantly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DEBUG == True;
	}

	actions
	{
		Set Match Time(6);
	}
}

rule("[DEBUG]Interact:SelfDamage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DEBUG == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Damage(Event Player, Event Player, 50);
	}
}