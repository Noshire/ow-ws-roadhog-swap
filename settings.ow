settings
{
	lobby
	{
		Max FFA Players: 8
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Ilios Well
				Lijiang Garden
				Necropolis
				Nepal Sanctum
			}
		}

		General
		{
			Game Length In Minutes: 15
			Game Mode Start: Immediately
			Hero Limit: Off
			Score To Win: 15
		}
	}

	heroes
	{
		General
		{
			Roadhog
			{
				Chain Hook Cooldown Time: 25%
				Damage Dealt: 20%
				Healing Dealt: 10%
				Jump Vertical Speed: 200%
				Movement Speed: 125%
				Ultimate Generation Whole Hog: 150%
				Whole Hog Knockback Scalar: 200%
			}

			enabled heroes
			{
				Roadhog
			}
		}
	}
}

variables
{
	global:
		26: DEBUG
		27: InvertAttackerDirectionOnSwap
		28: InvertVictimDirectionOnSwap
		29: KnockbackMin
		30: KnockbackMax
		31: KnockbackBase
		32: KnockbackDamageFactor
		33: KnockbackUpFactor
		34: KnockbackBuffedFactor
		35: KnockbackSelf

	player:
		26: TargetPosition
		27: TargetFacing
		28: Knockback
		29: Buffed
		30: BuffedEffectId
}

subroutines
{
	8: ApplyDamageBasedKnockback
	9: ApplySelfKnockback
	10: StunVictimIfEventPlayerBuffed
	11: ApplyKnockback
}

rule("Init:GlobalVariables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Global.DEBUG = True;
		Global.InvertAttackerDirectionOnSwap = True;
		Global.InvertVictimDirectionOnSwap = True;
		Global.KnockbackMin = 0;
		Global.KnockbackMax = 50;
		Global.KnockbackBase = 0;
		Global.KnockbackDamageFactor = 2.500;
		Global.KnockbackUpFactor = 0.250;
		Global.KnockbackBuffedFactor = 1.500;
		Global.KnockbackSelf = 8;
	}
}

rule("__DEBUG_SpawnDummyBots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.DEBUG == True;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Roadhog), All Teams, -1, Position Of(Players In Slot(0, All Teams)), Vector(0, 0, 0));
	}
}

rule("__DEBUG_MatchStartsInstantly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DEBUG == True;
	}

	actions
	{
		Set Match Time(6);
	}
}

rule("__DEBUG_Interact:SelfDamage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DEBUG == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Damage(Event Player, Event Player, 50);
	}
}

rule("PlayerDealtDamage@Roadhog@Ability1:Swap&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Environment Credit Player(Victim, Event Player);
		Event Player.TargetPosition = Position Of(Victim);
		Event Player.TargetFacing = -1 * Facing Direction Of(Event Player);
		Teleport(Victim, Position Of(Event Player));
		Teleport(Event Player, Event Player.TargetPosition);
		If(Global.InvertVictimDirectionOnSwap == True);
			Set Facing(Victim, Facing Direction Of(Event Player), To World);
		End;
		If(Global.InvertAttackerDirectionOnSwap == True);
			Set Facing(Event Player, Event Player.TargetFacing, To World);
		End;
		Cancel Primary Action(Event Player);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Event Player, 100);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Victim, 100);
	}
}

rule("PlayerDealtDamage@Roadhog@Primary:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Call Subroutine(ApplyDamageBasedKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Secondary:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Secondary Fire);
	}

	actions
	{
		Call Subroutine(ApplyDamageBasedKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Melee:Knockback&Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Melee);
	}

	actions
	{
		Victim.Knockback = Global.KnockbackMax;
		Call Subroutine(ApplyKnockback);
	}
}

rule("PlayerDealtDamage@Roadhog@Ultimate:Tag")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Ability == Button(Ultimate);
	}

	actions
	{
		Set Environment Credit Player(Victim, Event Player);
	}
}

rule("PlayerFired@Roadhog@NotGrounded@Primary:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Call Subroutine(ApplySelfKnockback);
	}
}

rule("PlayerFired@Roadhog@NotGrounded@Secondary:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is On Ground(Event Player) == False;
	}

	actions
	{
		Call Subroutine(ApplySelfKnockback);
	}
}

rule("PlayerIsFiring@Roadhog@Ultimate:KnockbackSelf")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Apply Impulse(Event Player, -1 * Facing Direction Of(Event Player), 2, To World, Cancel Contrary Motion XYZ);
		Loop If Condition Is True;
	}
}

rule("PlayerUsedAbility@Roadhog@TakeABreather:SpeedUp&ApplyBuffed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Create Effect(All Players(All Teams), Good Aura, Color(Yellow), Event Player, 1.500, Visible To Position and Radius);
		Event Player.BuffedEffectId = Last Created Entity;
		Event Player.Buffed = True;
		Set Jump Vertical Speed(Event Player, 150);
		Set Move Speed(Event Player, 175);
		Wait(3.500, Ignore Condition);
		Event Player.Buffed = False;
		Destroy Effect(Event Player.BuffedEffectId);
		Set Jump Vertical Speed(Event Player, 100);
		Set Move Speed(Event Player, 100);
	}
}

rule("PlayerDied@Self:NoScoreLoss")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Victim == Attacker;
	}

	actions
	{
		Modify Player Score(Victim, 1);
	}
}

rule("Subroutine:ApplyDamageBasedKnockback")
{
	event
	{
		Subroutine;
		ApplyDamageBasedKnockback;
	}

	actions
	{
		Victim.Knockback = Min(Global.KnockbackMax, Max(Global.KnockbackMin,
			Global.KnockbackBase + Event Damage * Global.KnockbackDamageFactor));
		Call Subroutine(ApplyKnockback);
	}
}

rule("Subroutine:ApplyKnockback")
{
	event
	{
		Subroutine;
		ApplyKnockback;
	}

	actions
	{
		Log To Inspector(Custom String("ApplyKnockback: Attacker={0}, Victim={1}", Event Player, Victim));
		Set Environment Credit Player(Victim, Event Player);
		If(Event Player.Buffed == True);
			Victim.Knockback *= Global.KnockbackBuffedFactor;
		End;
		Call Subroutine(StunVictimIfEventPlayerBuffed);
		Apply Impulse(Victim, Vector(X Component Of(Event Direction), Global.KnockbackUpFactor, Z Component Of(Event Direction)),
			Victim.Knockback, To World, Cancel Contrary Motion);
	}
}

rule("Subroutine:KnockbackSelf")
{
	event
	{
		Subroutine;
		ApplySelfKnockback;
	}

	actions
	{
		Apply Impulse(Event Player, -1 * Facing Direction Of(Event Player), Global.KnockbackSelf, To World, Cancel Contrary Motion XYZ);
	}
}

rule("Subroutine:StunVictimIfEventPlayerBuffed")
{
	event
	{
		Subroutine;
		StunVictimIfEventPlayerBuffed;
	}

	actions
	{
		Log To Inspector(Custom String("EventPlayer Buffed: {0}", Event Player.Buffed));
		If(Event Player.Buffed == True);
			Set Status(Victim, Event Player, Stunned, 1);
		End;
	}
}